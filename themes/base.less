/* @media only screen {
 *     @media (min-resolution: 124dpi), (-webkit-min-device-pixel-ratio: 1.3), (min--moz-device-pixel-ratio: 1.3), (-o-min-device-pixel-ratio: 4/3), (min-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) {
 *         ... use alternate backgrounds
 *         background-image: ...
 *         background-size: .....
 */

.border-radius(@radius) {
    -webkit-border-radius: @radius;
    -moz-border-radius: @radius;
    border-radius: @radius;
}

.box-shadow(@shadowing) {
    -webkit-box-sadow: @shadowing;
    -moz-box-shadow: @shadowing;
    box-shadow: @shadowing;
}

.ellipsis() {
    text-overflow: ellipsis;
    display: block;
    overflow: hidden;
    white-space: nowrap;
}

.expand() {
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
}

.hidden-and-clickable {
    .opacity(0);
	border: none;
	background: none;
}

.inline-block() {
    display: -moz-inline-box;
    display: inline-block;
    *display: inline;
    zoom: 1;
}

.opacity(@opacity-amount) {
    @opacity-percent: round(@opacity-amount * 100, 0);
    opacity: @opacity-amount;
    filter: alpha(opacity=@opacity-percent);
    -moz-opacity: @opacity-amount;
}

/* UniformJS elements act just like normal input elements.  Thus
 * they should show up as inline block.
 *
 * This also namespaces every other class to help avoid conflicts.
 */
.uniformjs {
    .inline-block;
    position: relative;
    background-repeat: no-repeat;
    -webkit-font-smoothing: anitaliased;
    vertical-align: middle;
    margin: 0;
    padding: 0;

    &:focus {
        /* Remove browser styles */
        outline: 0;
    }

    * {
        /* Remove browser styles */
        margin: 0;
        padding: 0;
        outline: 0;
        -moz-appearance: none;
        -webkit-appearance: none;
    }

    /* Buttons
     *
     * <div class="uniformjs button-left">
     *     <div class="button-right">
     *         <div class="button-middle">This is the button</div>
     *     </div>
     *     <button>This is the button</button>
     * </div>
     *
     * Instead of a <button>, it could be <a> or <input type="button">
     */
    &.button-left {
        a, button, input {
            .expand;
            .hidden-and-clickable;
        }
    }

    &.button-right {
    }

    &.button-middle {
    }

    /* Checkboxes
     *
     * <div class="uniformjs checkbox">
     *     <input type="checkbox" />
     * </div>
     */
    &.checkbox {
        width: @checkbox_width*1px;
        height: @checkbox_height*1px;
        background-position: @radio_left*1px @checkbox_top*1px;

        input {
            .expand;
            .hidden-and-clickable;
        }
    }

    /* File selectors
     *
     * <div class="uniformjs file">
     *     <div class="file-button-left">
     *         <div class="file-button-right">
     *             <div class="file-button-middle">Select File</div>
     *         </div>
     *     </div>
     *     <div class="file-filename-left">
     *         <div class="file-filename-right">
     *             <div class="file-filename-middle">C:\file.txt</div>
     *         </div>
     *     </div>
     *     <input type="file" />
     * </div>
     */
    &.file {
        input {
            .expand;
            .hidden-and-clickable;
        }
    }

    &.file-button-left {
    }

    &.file-button-right {
    }

    &.file-button-middle {
    }

    &.file-filename-left {
    }

    &.file-filename-right {
    }

    &.file-filename-middle {
    }

    /* Various unknown inputs
     *
     * <div class="uniformjs input">
     *     <input type="text" />
     * </div>
     */
    &.input {
        background-repeat: repeat-x;
    }

    /* Radio buttons
     *
     * <div class="uniformjs radio">
     *     <input type="radio" />
     * </div>
     */
    &.radio {
        width: @radio_width*1px;
        height: @radio_height*1px;
        background-position: @radio_left*1px @radio_top*1px;

        input {
            .expand;
            .hidden-and-clickable;
        }
    }

    /* Selects (not multi-selects)
     *
     * <div class="uniformjs select-left">
     *     <div class="select-right">
     *         <div class="select-middle">
     *             <div class="select-text">Current Option</div>
     *             <div class="select-options">Option 1
     * Option 2
     * Current Option
     * Option 4</div>
     *         </div>
     *     </div>
     *     <select>
     *         <option>Option 1</option>
     *         <option>Option 2</option>
     *         <option selected=selected>Current Option</option>
     *         <option>Option 4</option>
     *     </select>
     * </div>
     */
    &.select-left {
        background-position: 0 @selectLeft_top*1px;
        line-height: @selectLeft_height*1px;
        height: @selectLeft_height*1px;
        padding-left: @selectLeft_width*1px;
        cursor: pointer;

        select {
            .expand;
            .hidden-and-clickable;
        }
    }

    &.select-right {
        background-position: right @selectRight_top*1px;
        height: 100%;
        width: 100%;
        padding-right: @selectRight_width*1px;
    }

    &.select-middle {
        background-position: 0 @selectMiddle_top*1px;
    }

    &.select-text {
        line-height: @selectMiddle_height*1px;
        height: 100%;
        .ellipsis;
        width: 100%;
    }

    &.select-options {
        .opacity(0);
        position: absolute;  /* Take it out of document flow */
        white-space: no-wrap;  /* Used to calculate the true width */
    }

    /* Selects that are multiselects
     *
     * <div class="uniformjs multiselect">
     *     <select size=2>...</select>
     * </div>
     */
    &.multiselect {
    }

    /* Textarea
     *
     * <div class="uniformjs textarea">
     *     <textarea></textarea>
     * </div>
     */
    &.textarea {
    }

    /* All classes that could be applied:
     * active checked default disabled focus hidden hover indeterminate
     * readonly required
     */
}

/* Uploader */

div#{$class-wrapper}#{$class-upload} {
	background-position: 0 $upload-voffset;
	height: $upload-height;
	width: $upload-width;
	cursor: pointer;
	position: relative;
	overflow: hidden;

	span#{$class-action} {
		background-position: right ($upload-voffset + (-4 * $upload-height));
		height: $upload-height;
		line-height: $upload-height;
		width: $upload-action-width;
		text-align: center;
		float: left;
		display: inline;
		overflow: hidden;
		cursor: pointer;
	}

	span#{$class-filename} {
		@include ellipsis();
		float: left;
		cursor: default;
		height: ($upload-height - $upload-filename-margin-top - $upload-filename-margin-bottom);
		margin: $upload-filename-margin-top 0 $upload-filename-margin-bottom $upload-filename-margin-left;
		line-height: ($upload-height - $upload-filename-margin-top - $upload-filename-margin-bottom);
		width: $upload-filename-width;
		padding: $upload-filename-padding;
	}

	input {
		@include hideYetClickable();
		position: absolute;
		top: 0;
		right: 0;
		float: right;
		cursor: default;
		width: 100%;
		height: 100%;
	}

	@include whenActive {
		span#{$class-action} {
			background-position: right ($upload-voffset + (-6 * $upload-height));
		}
	}

	@include whenHover {
		background-position: 0 ($upload-voffset + (-2 * $upload-height));

		span#{$class-action} {
			background-position: right ($upload-voffset + (-5 * $upload-height));
		}

		@include whenActive {
			span#{$class-action} {
				background-position: right ($upload-voffset + (-7 * $upload-height));
			}
		}
	}

	@include whenDisabled {
		background-position: 0 ($upload-voffset + (-1 * $upload-height));

		span#{$class-action} {
			background-position: right ($upload-voffset + (-3 * $upload-height));
		}
	}
}

/* Buttons */

div#{$class-wrapper}#{$class-button} {
	background-position: 0 ($button-voffset + (-4 * $button-height));
	height: $button-height;
	cursor: pointer;
	position: relative;

	/* Keep buttons barely visible so they can get focus */
	a, button, input {
		@include opacity(0.01);
		display: block;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		position: absolute;
	}

	span {
		@include inline-block();
		line-height: $button-span-height;
		text-align: center;
		background-position: right $button-voffset;
		height: $button-span-height;
		margin-left: $button-margin-left;
		padding: $button-padding;
	}

	@include whenActive {
		background-position: 0 ($button-voffset + (-5 * $button-height));

		span {
			background-position: right ($button-voffset + (-1 * $button-height));
			cursor: default;
		}
	}

	@include whenHover {
		background-position: 0 ($button-voffset + (-6 * $button-height));

		span {
			background-position: right ($button-voffset + (-2 * $button-height));
		}
	}

	@include whenDisabled {
		background-position: 0 ($button-voffset + (-7 * $button-height));

		span {
			background-position: right ($button-voffset + (-3 * $button-height));
			cursor: default;
		}
	}
}
*/
